The glorious CastTex

******************************************************************
*** UpdateSVG has been deprecated in favor of the standalone tool
*** DyeSVG (https://github.com/dino-r/DyeSVG)
******************************************************************


WARNING: The routines were only tested for my purposes. Also, there are some issues that are not yet resolved. Use at your own risk.

Requirements: 
   - pdflatex (included in Tex Live or MacTex, https://www.tug.org)
   - haskell-platform (http://www.haskell.org/platform/)
   - ConfigFile module for Haskell (http://software.complete.org/configfile)
   - pdf2svg (http://www.cityinthesky.co.uk/opensource/pdf2svg)

CastTex takes a LaTeX file and converts it to HTML in such a way that all commands like \section are converted to HTML-Tags, with appropriate class attributes for styling via a CSS file. Furthermore, math delimited by $, $$, or align or equation environments are externalized to separate LaTeX files with standalone documentclass, compiled to PDF and then translated to SVG. The SVG files are included as images via the <img> tag in the final HTML. All SVG files have their style attributes removed. Inclusion of SVG styles from a CSS file are automated by the UpdateSvg tool.



Compiling from Source

You'll need a Haskell compiler along with some standard packages. I recommend downloading the haskell-platform with your favorite package manager as it includes most of the things you'll need. Furthermore, the module Data.ConfigFile is needed that can be obtained with cabal (comes with haskell-platform). All you have to do to install it is type
   $ cabal install ConfigFile
into the command line.

The src directory contains a makefile, i.e. if everything goes according to plan, all you need to do is
   $ cd src
   $ make
and two executables appear: casttex and updatesvg. For painless usage, you should either put the src directory into your PATH variable or symlink the executables to a directory included in the PATH variable. In the remainder it is assumed that you have done so, else you always need to specify the full or relative path to CastTex and UpdateSVG.



About CastTex

All you really need is a LaTeX file and a configuration file for CastTex. You can find both in the example directory. CastTex takes at most one argument, i.e. a path to a configuration file, everything else needs to be configured via that file. If no argument is given, it is assumed that the full path to the configuration file is "config". To try it out yourself do the following 
   $ cd example
   $ casttex
Thereafter, you can open the file www/example.html in your browser to view the preliminary result.

Note that CastTex is assumed to integrate into existing workflows. Thus, the generated www/example.html file does not contain any HTML-tags denoting the structure of your website. It merely contains what is assumed to appear somewhere within your <body> tag. The resulting HTML file should therefore be included in the right place via a server-side include or whatever else you deem worthy. 

The advantage of this is that you can create a CSS file for your general appearance and classes for sections, subsections, etc. Then, the generated HTML file will automatically assume this style if it is included in the body of any of your pages.

However, since no CSS is generated, the equations appear not aligned with the text. Nevertheless, all <img> tags have the class attribute "eqn" or "eqninline" which can be used to specify alignment. For the alignment with the surrounding text of inline equations include the following line in your CSS file:
   .eqninline { vertical-align: middle; }

Note that the style of the equations themselves, i.e. the style of the SVGs, can not be manipulated directly via a CSS file for reasons that will be explained in the next section.


About UpdateSVG

SVGs are quite tricky to handle. In general, it is possible to inline the source of an SVG in your HTML document. By this approach, the CSS file linked in the HTML file can automatically set the style for SVGs. However, all SVGs in a HTML file share a single namespace for their identifiers. Thus, we obtain unexpected behavior if we use automatically generated SVGs as they often share the same identifiers. To avoid cluttering the HTML file with lengthy SVG contents and to avoid having to rewrite all identifiers, I opted for the usage of the <img> tag to display the SVGs. However, it has no effect to link to an CSS file within an SVG file that is included via <img>. On the other hand, explicitly writing down the style into the SVG will have an effect.

The UpdateSVG tool, will take a CSS file as its first argument, followed by an arbitrary number of SVG files. It will copy the whole content of the CSS file at the appropriate place in the SVG files. To see how it works, you can open up an SVG file generated by CastTex. There, you'll find the Tag <style> which is still empty. Then run
   $ cd example
   $ updatesvg svg.css *.svg
Open up the same file again and you will see that all contents of svg.css are now within the style tags.

Thus, after changing e.g. colors, UpdateSVG needs to be run to update all SVGs to the new style. I included a makefile in the directory example/www/ that will automatically write a link to the style.css file I provided for testing purposes into the html contents and write the result to example_with_style.html. Furthermore all SVG files are updated with the style in svg.css. Thus, to see a "real life" integration into a workflow, run
   $ cd example/www
   $ make
and open up the example_with_style.html file in your browser.




Supported LaTeX commands and mappings to HTML:

   Inline Math
      $ math $ -> <img class="eqninline" src="n.svg"/>
   
   Equations: Supported declarations are $$, align, equation
      $$ math $$ -> <img class="eqn" src="n.svg"/>

   Paragraphs are started with <p>

   Commands with one argument are being mapped:
      \command{arg} -> <div class="command"> arg </div> 

   \href from the hypperref package is mapped
      \href{url}{name} -> <a class="textlink" href="url"> name </a> 
